diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index fca4ff7..d8f65a8 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -72,6 +72,7 @@ target += smd_rpc_sym.c
 $(obj)/smd_rpc_sym.c: $(src)/smd_rpc_sym $(src)/mkrpcsym.pl
 	$(call if_changed,mkrpcsym)
 
+obj-y += tzexec.o
 obj-$(CONFIG_MSM_SCM) += scm.o scm-boot.o
 obj-$(CONFIG_MSM_SECURE_IO) += scm-io.o
 obj-$(CONFIG_MSM_PIL) += peripheral-loader.o
diff --git a/arch/arm/mach-msm/scm-pas.c b/arch/arm/mach-msm/scm-pas.c
index 9eb04e0..9c779ba 100644
--- a/arch/arm/mach-msm/scm-pas.c
+++ b/arch/arm/mach-msm/scm-pas.c
@@ -22,6 +22,7 @@
 #include <mach/msm_bus.h>
 #include <mach/msm_bus_board.h>
 #include "scm-pas.h"
+#include "tzexec.h"
 
 #define PAS_INIT_IMAGE_CMD	1
 #define PAS_AUTH_AND_RESET_CMD	5
@@ -31,27 +32,17 @@
 int pas_init_image(enum pas_id id, const u8 *metadata, size_t size)
 {
 	int ret;
-	struct pas_init_image_req {
-		u32	proc;
-		u32	image_addr;
-	} request;
-	u32 scm_ret = 0;
+
 	/* Make memory physically contiguous */
 	void *mdata_buf = kmemdup(metadata, size, GFP_KERNEL);
 
 	if (!mdata_buf)
 		return -ENOMEM;
 
-	request.proc = id;
-	request.image_addr = virt_to_phys(mdata_buf);
-
-	ret = scm_call(SCM_SVC_PIL, PAS_INIT_IMAGE_CMD, &request,
-			sizeof(request), &scm_ret, sizeof(scm_ret));
+	ret = tz_manual_init_image((u32)id, virt_to_phys(mdata_buf));
 	kfree(mdata_buf);
 
-	if (ret)
-		return ret;
-	return scm_ret;
+    return ret;
 }
 EXPORT_SYMBOL(pas_init_image);
 
@@ -132,6 +123,8 @@ int pas_auth_and_reset(enum pas_id id)
 	int ret, bus_ret;
 	u32 proc = id, scm_ret = 0;
 
+        printk(KERN_ALERT "scm-pas: auth_and_reset %x\n", id);
+
 	bus_ret = scm_pas_enable_bw();
 	ret = scm_call(SCM_SVC_PIL, PAS_AUTH_AND_RESET_CMD, &proc,
 			sizeof(proc), &scm_ret, sizeof(scm_ret));
